"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = require("./models/api");
App({
    onLaunch: function () {
        var _this = this;
        this.globalData.api = api_1.getApiFacade();
        console.log(1);
        var loginCode;
        wx.login({
            success: function (_res) {
                loginCode = _res.code;
            }
        });
        wx.getSetting({
            success: function (res) {
                console.log(res);
                if (res.authSetting['scope.userInfo']) {
                    wx.getUserInfo({
                        success: function (res) {
                            console.log(res);
                            _this.globalData.userInfo = res.userInfo;
                            if (_this.userInfoReadyCallback) {
                                _this.userInfoReadyCallback(res.userInfo);
                            }
                            if (loginCode) {
                                _this.globalData.api && _this.globalData.api.login(loginCode, res.userInfo).then(function () {
                                    return _this.globalData.api && _this.globalData.api.getGroups().then(function (lists) {
                                        _this.globalData.lists = lists;
                                    }).then(_this.globalData.listUpdateCallback);
                                });
                                console.log("Logining");
                            }
                        }
                    });
                }
            }
        });
    },
    getListById: function (id) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].group_id == id) {
                return this.globalData.lists[i];
            }
        }
        throw new Error("不存在该清单ID");
    },
    putList: function (list) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].group_id == list.group_id) {
                this.globalData.lists[i] = list;
                return;
            }
        }
        this.globalData.lists.push(list);
    },
    deleteListById: function (id) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].group_id == id) {
                this.globalData.lists.splice(+i, 1);
                return;
            }
        }
    },
    refreshLists: function () {
        var _this = this;
        this.globalData.api && this.globalData.api.getGroups()
            .then(function (r) {
            _this.globalData.lists = r;
        })
            .then(this.globalData.listUpdateCallback);
    },
    globalData: {
        lists: [],
        last_list_id: 21
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsb0NBQXVEO0FBaUJ2RCxHQUFHLENBQVM7SUFDVixRQUFRLEVBQVI7UUFBQSxpQkE4Q0M7UUE3Q0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsa0JBQVksRUFBRSxDQUFBO1FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFHZCxJQUFJLFNBQWlCLENBQUM7UUFDdEIsRUFBRSxDQUFDLEtBQUssQ0FBQztZQUNQLE9BQU8sWUFBQyxJQUFJO2dCQUdWLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFBO1lBQ3ZCLENBQUM7U0FDRixDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osT0FBTyxFQUFFLFVBQUMsR0FBRztnQkFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUNoQixJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFFckMsRUFBRSxDQUFDLFdBQVcsQ0FBQzt3QkFDYixPQUFPLEVBQUUsVUFBQSxHQUFHOzRCQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7NEJBRWhCLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUE7NEJBR3ZDLElBQUksS0FBSSxDQUFDLHFCQUFxQixFQUFFO2dDQUM5QixLQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBOzZCQUN6Qzs0QkFDRCxJQUFJLFNBQVMsRUFBRTtnQ0FFYixLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQzVFO29DQUVFLE9BQU8sS0FBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksS0FBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSzt3Q0FDdkUsS0FBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO29DQUMvQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO2dDQUM3QyxDQUFDLENBQ0YsQ0FBQTtnQ0FDRCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBOzZCQUN4Qjt3QkFDSCxDQUFDO3FCQUNGLENBQUMsQ0FBQTtpQkFDSDtZQUNILENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0QsV0FBVyxFQUFYLFVBQVksRUFBVTtRQUNwQixLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLEVBQUUsRUFBRTtnQkFDM0MsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNoQztTQUNGO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM3QixDQUFDO0lBQ0QsT0FBTyxFQUFQLFVBQVEsSUFBVztRQUNqQixLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ3RELElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQTtnQkFDL0IsT0FBTTthQUNQO1NBQ0Y7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUNELGNBQWMsRUFBZCxVQUFlLEVBQVU7UUFDdkIsS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRTtZQUNuQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxFQUFFLEVBQUU7Z0JBQzNDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDbkMsT0FBTTthQUNQO1NBQ0Y7SUFDSCxDQUFDO0lBQ0QsWUFBWSxFQUFaO1FBQUEsaUJBTUM7UUFMQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUU7YUFDbkQsSUFBSSxDQUFDLFVBQUMsQ0FBQztZQUNOLEtBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUMzQixDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFDRCxVQUFVLEVBQUU7UUFDVixLQUFLLEVBQUUsRUFBRTtRQUNULFlBQVksRUFBRSxFQUFFO0tBQ2pCO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy9hcHAudHNcbmltcG9ydCB7IElMaXN0IH0gZnJvbSAnLi91dGlscy90eXBlcydcbmltcG9ydCB7IGdldEFwaUZhY2FkZSwgSUFwaUZhY2FkZSB9IGZyb20gJy4vbW9kZWxzL2FwaSdcblxuZXhwb3J0IGludGVyZmFjZSBJTXlBcHAge1xuICBnZXRMaXN0QnlJZChpZDogbnVtYmVyKTogSUxpc3QsXG4gIHB1dExpc3QobGlzdDogSUxpc3QpOiB2b2lkLFxuICBkZWxldGVMaXN0QnlJZChpZDogbnVtYmVyKTogdm9pZCxcbiAgdXNlckluZm9SZWFkeUNhbGxiYWNrPyhyZXM6IHd4LlVzZXJJbmZvKTogdm9pZFxuICByZWZyZXNoTGlzdHMoKTogdm9pZFxuICBnbG9iYWxEYXRhOiB7XG4gICAgYXBpPzogSUFwaUZhY2FkZVxuICAgIHVzZXJJbmZvPzogd3guVXNlckluZm9cbiAgICBsaXN0czogQXJyYXk8SUxpc3Q+XG4gICAgbGFzdF9saXN0X2lkOiBudW1iZXJcbiAgICBsaXN0VXBkYXRlQ2FsbGJhY2s/OiAoKSA9PiB2b2lkXG4gIH1cbn1cblxuQXBwPElNeUFwcD4oe1xuICBvbkxhdW5jaCgpIHtcbiAgICB0aGlzLmdsb2JhbERhdGEuYXBpID0gZ2V0QXBpRmFjYWRlKClcbiAgICBjb25zb2xlLmxvZygxKVxuXG4gICAgLy8g55m75b2VXG4gICAgdmFyIGxvZ2luQ29kZTogc3RyaW5nO1xuICAgIHd4LmxvZ2luKHtcbiAgICAgIHN1Y2Nlc3MoX3Jlcykge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhfcmVzLmNvZGUpXG4gICAgICAgIC8vIOWPkemAgSBfcmVzLmNvZGUg5Yiw5ZCO5Y+w5o2i5Y+WIG9wZW5JZCwgc2Vzc2lvbktleSwgdW5pb25JZFxuICAgICAgICBsb2dpbkNvZGUgPSBfcmVzLmNvZGVcbiAgICAgIH1cbiAgICB9KVxuICAgIC8vIOiOt+WPlueUqOaIt+S/oeaBr1xuICAgIHd4LmdldFNldHRpbmcoe1xuICAgICAgc3VjY2VzczogKHJlcykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICAgIGlmIChyZXMuYXV0aFNldHRpbmdbJ3Njb3BlLnVzZXJJbmZvJ10pIHtcbiAgICAgICAgICAvLyDlt7Lnu4/mjojmnYPvvIzlj6/ku6Xnm7TmjqXosIPnlKggZ2V0VXNlckluZm8g6I635Y+W5aS05YOP5pi156ew77yM5LiN5Lya5by55qGGXG4gICAgICAgICAgd3guZ2V0VXNlckluZm8oe1xuICAgICAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKVxuICAgICAgICAgICAgICAvLyDlj6/ku6XlsIYgcmVzIOWPkemAgee7meWQjuWPsOino+eggeWHuiB1bmlvbklkXG4gICAgICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS51c2VySW5mbyA9IHJlcy51c2VySW5mb1xuICAgICAgICAgICAgICAvLyDnlLHkuo4gZ2V0VXNlckluZm8g5piv572R57uc6K+35rGC77yM5Y+v6IO95Lya5ZyoIFBhZ2Uub25Mb2FkIOS5i+WQjuaJjei/lOWbnlxuICAgICAgICAgICAgICAvLyDmiYDku6XmraTlpITliqDlhaUgY2FsbGJhY2sg5Lul6Ziy5q2i6L+Z56eN5oOF5Ya1XG4gICAgICAgICAgICAgIGlmICh0aGlzLnVzZXJJbmZvUmVhZHlDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRoaXMudXNlckluZm9SZWFkeUNhbGxiYWNrKHJlcy51c2VySW5mbylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobG9naW5Db2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gTG9naW4hXG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmFwaSAmJiB0aGlzLmdsb2JhbERhdGEuYXBpLmxvZ2luKGxvZ2luQ29kZSwgcmVzLnVzZXJJbmZvKS50aGVuKFxuICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgR3JvdXBzIVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxEYXRhLmFwaSAmJiB0aGlzLmdsb2JhbERhdGEuYXBpLmdldEdyb3VwcygpLnRoZW4oKGxpc3RzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmxpc3RzID0gbGlzdHNcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbih0aGlzLmdsb2JhbERhdGEubGlzdFVwZGF0ZUNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvZ2luaW5nXCIpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfSxcbiAgZ2V0TGlzdEJ5SWQoaWQ6IG51bWJlcik6IElMaXN0IHtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuZ2xvYmFsRGF0YS5saXN0cykge1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsRGF0YS5saXN0c1tpXS5ncm91cF9pZCA9PSBpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxEYXRhLmxpc3RzW2ldXG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIuS4jeWtmOWcqOivpea4heWNlUlEXCIpXG4gIH0sXG4gIHB1dExpc3QobGlzdDogSUxpc3QpIHtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuZ2xvYmFsRGF0YS5saXN0cykge1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsRGF0YS5saXN0c1tpXS5ncm91cF9pZCA9PSBsaXN0Lmdyb3VwX2lkKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5saXN0c1tpXSA9IGxpc3RcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZ2xvYmFsRGF0YS5saXN0cy5wdXNoKGxpc3QpXG4gIH0sXG4gIGRlbGV0ZUxpc3RCeUlkKGlkOiBudW1iZXIpOiB2b2lkIHtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuZ2xvYmFsRGF0YS5saXN0cykge1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsRGF0YS5saXN0c1tpXS5ncm91cF9pZCA9PSBpZCkge1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEubGlzdHMuc3BsaWNlKCtpLCAxKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlZnJlc2hMaXN0cygpOiB2b2lkIHtcbiAgICB0aGlzLmdsb2JhbERhdGEuYXBpICYmIHRoaXMuZ2xvYmFsRGF0YS5hcGkuZ2V0R3JvdXBzKClcbiAgICAgIC50aGVuKChyKSA9PiB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5saXN0cyA9IHJcbiAgICAgIH0pXG4gICAgICAudGhlbih0aGlzLmdsb2JhbERhdGEubGlzdFVwZGF0ZUNhbGxiYWNrKVxuICB9LFxuICBnbG9iYWxEYXRhOiB7XG4gICAgbGlzdHM6IFtdLFxuICAgIGxhc3RfbGlzdF9pZDogMjFcbiAgfVxufSkiXX0=