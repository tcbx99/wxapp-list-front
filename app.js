"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_seeder_1 = require("./utils/testing/list_seeder");
var seedLine = [
    function (app) {
        app.globalData.lists = (new list_seeder_1.ListSeeder).seedManyTimes(20);
    }
];
App({
    onLaunch: function () {
        var _this = this;
        for (var i in seedLine) {
            seedLine[i](this);
        }
        var logs = wx.getStorageSync('logs') || [];
        logs.unshift(Date.now());
        wx.setStorageSync('logs', logs);
        wx.login({
            success: function (_res) {
            }
        });
        wx.getSetting({
            success: function (res) {
                if (res.authSetting['scope.userInfo']) {
                    wx.getUserInfo({
                        success: function (res) {
                            _this.globalData.userInfo = res.userInfo;
                            if (_this.userInfoReadyCallback) {
                                _this.userInfoReadyCallback(res.userInfo);
                            }
                        }
                    });
                }
            }
        });
    },
    getListById: function (id) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].id == id) {
                return this.globalData.lists[i];
            }
        }
        throw new Error("不存在该清单ID");
    },
    putList: function (list) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].id == list.id) {
                this.globalData.lists[i] = list;
                return;
            }
        }
        this.globalData.lists.push(list);
    },
    deleteListById: function (id) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].id == id) {
                this.globalData.lists.splice(+i, 1);
                return;
            }
        }
    },
    globalData: {
        lists: [],
        last_list_id: 21
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsMkRBQXdEO0FBY3hELElBQUksUUFBUSxHQUFpQztJQUUzQyxVQUFDLEdBQUc7UUFDRixHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksd0JBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMzRCxDQUFDO0NBQ0YsQ0FBQTtBQUVELEdBQUcsQ0FBUztJQUNWLFFBQVEsRUFBUjtRQUFBLGlCQW9DQztRQWxDQyxLQUFLLElBQUksQ0FBQyxJQUFJLFFBQVEsRUFBRTtZQUN0QixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDbEI7UUFFRCxJQUFJLElBQUksR0FBYSxFQUFFLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQ3hCLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRy9CLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDUCxPQUFPLFlBQUMsSUFBSTtZQUdaLENBQUM7U0FDRixDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osT0FBTyxFQUFFLFVBQUMsR0FBRztnQkFDWCxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFFckMsRUFBRSxDQUFDLFdBQVcsQ0FBQzt3QkFDYixPQUFPLEVBQUUsVUFBQSxHQUFHOzRCQUVWLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUE7NEJBR3ZDLElBQUksS0FBSSxDQUFDLHFCQUFxQixFQUFFO2dDQUM5QixLQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBOzZCQUN6Qzt3QkFDSCxDQUFDO3FCQUNGLENBQUMsQ0FBQTtpQkFDSDtZQUNILENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0QsV0FBVyxFQUFYLFVBQVksRUFBVTtRQUNwQixLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDckMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNoQztTQUNGO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM3QixDQUFDO0lBQ0QsT0FBTyxFQUFQLFVBQVEsSUFBVztRQUNqQixLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQzFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQTtnQkFDL0IsT0FBTTthQUNQO1NBQ0Y7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUNELGNBQWMsRUFBZCxVQUFlLEVBQVM7UUFDdEIsS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRTtZQUNuQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbEMsT0FBTTthQUNQO1NBQ0Y7SUFDSCxDQUFDO0lBQ0QsVUFBVSxFQUFFO1FBQ1YsS0FBSyxFQUFFLEVBQUU7UUFDVCxZQUFZLEVBQUUsRUFBRTtLQUNqQjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vYXBwLnRzXG5pbXBvcnQgeyBJTGlzdCB9IGZyb20gJy4vdXRpbHMvdHlwZXMnXG5pbXBvcnQgeyBMaXN0U2VlZGVyIH0gZnJvbSAnLi91dGlscy90ZXN0aW5nL2xpc3Rfc2VlZGVyJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElNeUFwcCB7XG4gIGdldExpc3RCeUlkKGlkOiBudW1iZXIpOiBJTGlzdCxcbiAgcHV0TGlzdChsaXN0OiBJTGlzdCk6IHZvaWQsXG4gIGRlbGV0ZUxpc3RCeUlkKGlkOiBudW1iZXIpOnZvaWQsXG4gIHVzZXJJbmZvUmVhZHlDYWxsYmFjaz8ocmVzOiB3eC5Vc2VySW5mbyk6IHZvaWRcbiAgZ2xvYmFsRGF0YToge1xuICAgIHVzZXJJbmZvPzogd3guVXNlckluZm9cbiAgICBsaXN0czogQXJyYXk8SUxpc3Q+XG4gICAgbGFzdF9saXN0X2lkOiBudW1iZXJcbiAgfVxufVxuXG52YXIgc2VlZExpbmU6IEFycmF5PChhcHA6IElNeUFwcCkgPT4gdm9pZD4gPSBbXG4gIC8vIFNlZWQgTGlzdHNcbiAgKGFwcCkgPT4ge1xuICAgIGFwcC5nbG9iYWxEYXRhLmxpc3RzID0gKG5ldyBMaXN0U2VlZGVyKS5zZWVkTWFueVRpbWVzKDIwKVxuICB9XG5dXG5cbkFwcDxJTXlBcHA+KHtcbiAgb25MYXVuY2goKSB7XG4gICAgLy8gU2VlZCBFdmVyeXRoaW5nXG4gICAgZm9yICh2YXIgaSBpbiBzZWVkTGluZSkge1xuICAgICAgc2VlZExpbmVbaV0odGhpcylcbiAgICB9XG4gICAgLy8g5bGV56S65pys5Zyw5a2Y5YKo6IO95YqbXG4gICAgdmFyIGxvZ3M6IG51bWJlcltdID0gd3guZ2V0U3RvcmFnZVN5bmMoJ2xvZ3MnKSB8fCBbXVxuICAgIGxvZ3MudW5zaGlmdChEYXRlLm5vdygpKVxuICAgIHd4LnNldFN0b3JhZ2VTeW5jKCdsb2dzJywgbG9ncylcblxuICAgIC8vIOeZu+W9lVxuICAgIHd4LmxvZ2luKHtcbiAgICAgIHN1Y2Nlc3MoX3Jlcykge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhfcmVzLmNvZGUpXG4gICAgICAgIC8vIOWPkemAgSBfcmVzLmNvZGUg5Yiw5ZCO5Y+w5o2i5Y+WIG9wZW5JZCwgc2Vzc2lvbktleSwgdW5pb25JZFxuICAgICAgfVxuICAgIH0pXG4gICAgLy8g6I635Y+W55So5oi35L+h5oGvXG4gICAgd3guZ2V0U2V0dGluZyh7XG4gICAgICBzdWNjZXNzOiAocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuYXV0aFNldHRpbmdbJ3Njb3BlLnVzZXJJbmZvJ10pIHtcbiAgICAgICAgICAvLyDlt7Lnu4/mjojmnYPvvIzlj6/ku6Xnm7TmjqXosIPnlKggZ2V0VXNlckluZm8g6I635Y+W5aS05YOP5pi156ew77yM5LiN5Lya5by55qGGXG4gICAgICAgICAgd3guZ2V0VXNlckluZm8oe1xuICAgICAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICAgICAgLy8g5Y+v5Lul5bCGIHJlcyDlj5HpgIHnu5nlkI7lj7Dop6PnoIHlh7ogdW5pb25JZFxuICAgICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEudXNlckluZm8gPSByZXMudXNlckluZm9cbiAgICAgICAgICAgICAgLy8g55Sx5LqOIGdldFVzZXJJbmZvIOaYr+e9kee7nOivt+axgu+8jOWPr+iDveS8muWcqCBQYWdlLm9uTG9hZCDkuYvlkI7miY3ov5Tlm55cbiAgICAgICAgICAgICAgLy8g5omA5Lul5q2k5aSE5Yqg5YWlIGNhbGxiYWNrIOS7pemYsuatoui/meenjeaDheWGtVxuICAgICAgICAgICAgICBpZiAodGhpcy51c2VySW5mb1JlYWR5Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJJbmZvUmVhZHlDYWxsYmFjayhyZXMudXNlckluZm8pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfSxcbiAgZ2V0TGlzdEJ5SWQoaWQ6IG51bWJlcik6IElMaXN0IHtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuZ2xvYmFsRGF0YS5saXN0cykge1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsRGF0YS5saXN0c1tpXS5pZCA9PSBpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxEYXRhLmxpc3RzW2ldXG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIuS4jeWtmOWcqOivpea4heWNlUlEXCIpXG4gIH0sXG4gIHB1dExpc3QobGlzdDogSUxpc3QpIHtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuZ2xvYmFsRGF0YS5saXN0cykge1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsRGF0YS5saXN0c1tpXS5pZCA9PSBsaXN0LmlkKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5saXN0c1tpXSA9IGxpc3RcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZ2xvYmFsRGF0YS5saXN0cy5wdXNoKGxpc3QpXG4gIH0sXG4gIGRlbGV0ZUxpc3RCeUlkKGlkOm51bWJlcik6dm9pZCB7XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLmdsb2JhbERhdGEubGlzdHMpIHtcbiAgICAgIGlmICh0aGlzLmdsb2JhbERhdGEubGlzdHNbaV0uaWQgPT0gaWQpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmxpc3RzLnNwbGljZSgraSwxKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGdsb2JhbERhdGE6IHtcbiAgICBsaXN0czogW10sXG4gICAgbGFzdF9saXN0X2lkOiAyMVxuICB9XG59KSJdfQ==