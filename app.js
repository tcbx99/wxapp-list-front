"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = require("./models/api");
App({
    onLaunch: function () {
        var _this = this;
        this.globalData.api = api_1.getApiFacade();
        console.log(1);
        var logs = wx.getStorageSync('logs') || [];
        logs.unshift(Date.now());
        wx.setStorageSync('logs', logs);
        var loginCode;
        wx.login({
            success: function (_res) {
                loginCode = _res.code;
            }
        });
        wx.getSetting({
            success: function (res) {
                console.log(res);
                if (res.authSetting['scope.userInfo']) {
                    wx.getUserInfo({
                        success: function (res) {
                            console.log(res);
                            _this.globalData.userInfo = res.userInfo;
                            if (_this.userInfoReadyCallback) {
                                _this.userInfoReadyCallback(res.userInfo);
                            }
                            if (loginCode) {
                                _this.globalData.api && _this.globalData.api.login(loginCode, res.userInfo).then(function () {
                                    return _this.globalData.api && _this.globalData.api.getGroups().then(function (lists) {
                                        _this.globalData.lists = lists;
                                    }).then(_this.globalData.listUpdateCallback);
                                });
                                console.log("Logining");
                            }
                        }
                    });
                }
            }
        });
    },
    getListById: function (id) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].group_id == id) {
                return this.globalData.lists[i];
            }
        }
        throw new Error("不存在该清单ID");
    },
    putList: function (list) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].group_id == list.group_id) {
                this.globalData.lists[i] = list;
                return;
            }
        }
        this.globalData.lists.push(list);
    },
    deleteListById: function (id) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].group_id == id) {
                this.globalData.lists.splice(+i, 1);
                return;
            }
        }
    },
    refreshLists: function () {
        var _this = this;
        this.globalData.api && this.globalData.api.getGroups()
            .then(function (r) {
            _this.globalData.lists = r;
        })
            .then(this.globalData.listUpdateCallback);
    },
    globalData: {
        lists: [],
        last_list_id: 21
    }
});
//# sourceMappingURL=data:application/json;base64,