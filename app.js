"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_seeder_1 = require("./utils/testing/list_seeder");
var seedLine = [
    function (app) {
        app.globalData.lists = (new list_seeder_1.ListSeeder).seedManyTimes(20);
    }
];
App({
    onLaunch: function () {
        var _this = this;
        for (var i in seedLine) {
            seedLine[i](this);
        }
        var logs = wx.getStorageSync('logs') || [];
        logs.unshift(Date.now());
        wx.setStorageSync('logs', logs);
        wx.login({
            success: function (_res) {
            }
        });
        wx.getSetting({
            success: function (res) {
                if (res.authSetting['scope.userInfo']) {
                    wx.getUserInfo({
                        success: function (res) {
                            _this.globalData.userInfo = res.userInfo;
                            if (_this.userInfoReadyCallback) {
                                _this.userInfoReadyCallback(res.userInfo);
                            }
                        }
                    });
                }
            }
        });
    },
    getListById: function (id) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].id == id) {
                return this.globalData.lists[i];
            }
        }
        throw new Error("不存在该清单ID");
    },
    putList: function (list) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].id == list.id) {
                this.globalData.lists[i] = list;
                return;
            }
        }
        this.globalData.lists.push(list);
    },
    deleteListById: function (id) {
        for (var i in this.globalData.lists) {
            if (this.globalData.lists[i].id == id) {
                this.globalData.lists.splice(+i, 1);
                return;
            }
        }
    },
    globalData: {
        lists: [],
        last_list_id: 21
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsMkRBQXdEO0FBYXhELElBQUksUUFBUSxHQUFpQztJQUUzQyxVQUFDLEdBQUc7UUFDRixHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksd0JBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMzRCxDQUFDO0NBQ0YsQ0FBQTtBQUVELEdBQUcsQ0FBUztJQUNWLFFBQVEsRUFBUjtRQUFBLGlCQW9DQztRQWxDQyxLQUFLLElBQUksQ0FBQyxJQUFJLFFBQVEsRUFBRTtZQUN0QixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDbEI7UUFFRCxJQUFJLElBQUksR0FBYSxFQUFFLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQ3hCLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRy9CLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDUCxPQUFPLFlBQUMsSUFBSTtZQUdaLENBQUM7U0FDRixDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osT0FBTyxFQUFFLFVBQUMsR0FBRztnQkFDWCxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFFckMsRUFBRSxDQUFDLFdBQVcsQ0FBQzt3QkFDYixPQUFPLEVBQUUsVUFBQSxHQUFHOzRCQUVWLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUE7NEJBR3ZDLElBQUksS0FBSSxDQUFDLHFCQUFxQixFQUFFO2dDQUM5QixLQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBOzZCQUN6Qzt3QkFDSCxDQUFDO3FCQUNGLENBQUMsQ0FBQTtpQkFDSDtZQUNILENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0QsV0FBVyxFQUFYLFVBQVksRUFBVTtRQUNwQixLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDckMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNoQztTQUNGO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM3QixDQUFDO0lBQ0QsT0FBTyxFQUFQLFVBQVEsSUFBVztRQUNqQixLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQzFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQTtnQkFDL0IsT0FBTTthQUNQO1NBQ0Y7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUNELGNBQWMsRUFBZCxVQUFlLEVBQVM7UUFDdEIsS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRTtZQUNuQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbEMsT0FBTTthQUNQO1NBQ0Y7SUFDSCxDQUFDO0lBQ0QsVUFBVSxFQUFFO1FBQ1YsS0FBSyxFQUFFLEVBQUU7UUFDVCxZQUFZLEVBQUUsRUFBRTtLQUNqQjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vYXBwLnRzXG5pbXBvcnQgeyBJTGlzdCB9IGZyb20gJy4vdXRpbHMvdHlwZXMnXG5pbXBvcnQgeyBMaXN0U2VlZGVyIH0gZnJvbSAnLi91dGlscy90ZXN0aW5nL2xpc3Rfc2VlZGVyJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElNeUFwcCB7XG4gIGdldExpc3RCeUlkKGlkOiBudW1iZXIpOiBJTGlzdCxcbiAgcHV0TGlzdChsaXN0OiBJTGlzdCk6IHZvaWQsXG4gIGRlbGV0ZUxpc3RCeUlkKGlkOiBudW1iZXIpOnZvaWQsXG4gIHVzZXJJbmZvUmVhZHlDYWxsYmFjaz8ocmVzOiB3eC5Vc2VySW5mbyk6IHZvaWRcbiAgZ2xvYmFsRGF0YToge1xuICAgIHVzZXJJbmZvPzogd3guVXNlckluZm9cbiAgICBsaXN0czogQXJyYXk8SUxpc3Q+XG4gIH1cbn1cblxudmFyIHNlZWRMaW5lOiBBcnJheTwoYXBwOiBJTXlBcHApID0+IHZvaWQ+ID0gW1xuICAvLyBTZWVkIExpc3RzXG4gIChhcHApID0+IHtcbiAgICBhcHAuZ2xvYmFsRGF0YS5saXN0cyA9IChuZXcgTGlzdFNlZWRlcikuc2VlZE1hbnlUaW1lcygyMClcbiAgfVxuXVxuXG5BcHA8SU15QXBwPih7XG4gIG9uTGF1bmNoKCkge1xuICAgIC8vIFNlZWQgRXZlcnl0aGluZ1xuICAgIGZvciAodmFyIGkgaW4gc2VlZExpbmUpIHtcbiAgICAgIHNlZWRMaW5lW2ldKHRoaXMpXG4gICAgfVxuICAgIC8vIOWxleekuuacrOWcsOWtmOWCqOiDveWKm1xuICAgIHZhciBsb2dzOiBudW1iZXJbXSA9IHd4LmdldFN0b3JhZ2VTeW5jKCdsb2dzJykgfHwgW11cbiAgICBsb2dzLnVuc2hpZnQoRGF0ZS5ub3coKSlcbiAgICB3eC5zZXRTdG9yYWdlU3luYygnbG9ncycsIGxvZ3MpXG5cbiAgICAvLyDnmbvlvZVcbiAgICB3eC5sb2dpbih7XG4gICAgICBzdWNjZXNzKF9yZXMpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coX3Jlcy5jb2RlKVxuICAgICAgICAvLyDlj5HpgIEgX3Jlcy5jb2RlIOWIsOWQjuWPsOaNouWPliBvcGVuSWQsIHNlc3Npb25LZXksIHVuaW9uSWRcbiAgICAgIH1cbiAgICB9KVxuICAgIC8vIOiOt+WPlueUqOaIt+S/oeaBr1xuICAgIHd4LmdldFNldHRpbmcoe1xuICAgICAgc3VjY2VzczogKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmF1dGhTZXR0aW5nWydzY29wZS51c2VySW5mbyddKSB7XG4gICAgICAgICAgLy8g5bey57uP5o6I5p2D77yM5Y+v5Lul55u05o6l6LCD55SoIGdldFVzZXJJbmZvIOiOt+WPluWktOWDj+aYteensO+8jOS4jeS8muW8ueahhlxuICAgICAgICAgIHd4LmdldFVzZXJJbmZvKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XG4gICAgICAgICAgICAgIC8vIOWPr+S7peWwhiByZXMg5Y+R6YCB57uZ5ZCO5Y+w6Kej56CB5Ye6IHVuaW9uSWRcbiAgICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLnVzZXJJbmZvID0gcmVzLnVzZXJJbmZvXG4gICAgICAgICAgICAgIC8vIOeUseS6jiBnZXRVc2VySW5mbyDmmK/nvZHnu5zor7fmsYLvvIzlj6/og73kvJrlnKggUGFnZS5vbkxvYWQg5LmL5ZCO5omN6L+U5ZueXG4gICAgICAgICAgICAgIC8vIOaJgOS7peatpOWkhOWKoOWFpSBjYWxsYmFjayDku6XpmLLmraLov5nnp43mg4XlhrVcbiAgICAgICAgICAgICAgaWYgKHRoaXMudXNlckluZm9SZWFkeUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51c2VySW5mb1JlYWR5Q2FsbGJhY2socmVzLnVzZXJJbmZvKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG4gIGdldExpc3RCeUlkKGlkOiBudW1iZXIpOiBJTGlzdCB7XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLmdsb2JhbERhdGEubGlzdHMpIHtcbiAgICAgIGlmICh0aGlzLmdsb2JhbERhdGEubGlzdHNbaV0uaWQgPT0gaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2xvYmFsRGF0YS5saXN0c1tpXVxuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCLkuI3lrZjlnKjor6XmuIXljZVJRFwiKVxuICB9LFxuICBwdXRMaXN0KGxpc3Q6IElMaXN0KSB7XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLmdsb2JhbERhdGEubGlzdHMpIHtcbiAgICAgIGlmICh0aGlzLmdsb2JhbERhdGEubGlzdHNbaV0uaWQgPT0gbGlzdC5pZCkge1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEubGlzdHNbaV0gPSBsaXN0XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmdsb2JhbERhdGEubGlzdHMucHVzaChsaXN0KVxuICB9LFxuICBkZWxldGVMaXN0QnlJZChpZDpudW1iZXIpOnZvaWQge1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5nbG9iYWxEYXRhLmxpc3RzKSB7XG4gICAgICBpZiAodGhpcy5nbG9iYWxEYXRhLmxpc3RzW2ldLmlkID09IGlkKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5saXN0cy5zcGxpY2UoK2ksMSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBnbG9iYWxEYXRhOiB7XG4gICAgbGlzdHM6IFtdLFxuICAgIGxhc3RfbGlzdF9pZDogMjFcbiAgfVxufSkiXX0=