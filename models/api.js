"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MockApiFacade = (function () {
    function MockApiFacade() {
        this.dummy_group_id = 1;
    }
    MockApiFacade.prototype.login = function () {
        return new Promise(function (r) { r({ token: "dummy", user_id: 1 }); });
    };
    MockApiFacade.prototype.createGroup = function (name, desc, gType) {
        var _this = this;
        return new Promise(function (r) {
            r({
                group_id: _this.dummy_group_id++,
                group_name: name,
                group_desc: desc,
                group_type: gType,
                missions_info: {
                    personal_finished_count: 0,
                    finished_count: 20,
                    all_count: 50
                },
                is_admin: true
            });
        });
    };
    MockApiFacade.prototype.updateGroup = function (list) {
        return new Promise(function (r) {
            r(list);
        });
    };
    MockApiFacade.prototype.deleteGroup = function () { return new Promise(function (r) { r(); }); };
    MockApiFacade.prototype.joinGroupFlow = function () {
        return new Promise(function (r) {
            r({ group_name: "测试", group_desc: "某某坤就是傻逼" });
        });
    };
    MockApiFacade.prototype.joinGroupConfirm = function (id) {
        return new Promise(function (r) {
            r({
                group_id: id,
                group_name: "测试",
                group_desc: "某某坤就是傻逼",
                group_type: 0,
                missions_info: {
                    personal_finished_count: 0,
                    finished_count: 20,
                    all_count: 50
                },
                is_admin: false
            });
        });
    };
    MockApiFacade.prototype.getGroups = function () {
        return new Promise(function (r) { r([]); });
    };
    return MockApiFacade;
}());
var APP_BASE = "http://localhost:8080/";
var ApiFacade = (function () {
    function ApiFacade() {
        this.token = '';
        this.user_id = 0;
        this.dummy_group_id = 1;
    }
    ApiFacade.prototype.promisify = function (f, p) {
        return new Promise(function (r, e) {
            p.success = function (d) { r(d); };
            p.fail = function (d) { e(d); };
            f(p);
        });
    };
    ApiFacade.prototype.login = function (code, u) {
        var _this = this;
        return this.promisify(wx.request, {
            url: APP_BASE + 'login',
            method: 'POST',
            data: {
                auth_code: code,
                nickname: u.nickName,
                avatar_url: u.avatarUrl,
            }
        }).then(function (r) {
            _this.token = r.data.token;
            _this.user_id = +r.data.user_id;
            return {
                token: r.data.token,
                user_id: r.data.user_id
            };
        });
    };
    ApiFacade.prototype.createGroup = function (name, desc, gType) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'createGroup' + '&user_id=' + this.user_id,
            method: 'POST',
            data: {
                group_name: name,
                group_desc: desc,
                group_type: gType,
            }
        }).then(function (r) {
            return r.data;
        });
    };
    ApiFacade.prototype.updateGroup = function (list) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'createGroup' + '&user_id=' + this.user_id,
            method: 'POST',
            data: {
                group_name: list.group_name,
                group_desc: list.group_desc,
                group_type: list.group_type,
            }
        }).then(function (r) {
            return r.data;
        });
    };
    ApiFacade.prototype.deleteGroup = function () { return new Promise(function (r) { r(); }); };
    ApiFacade.prototype.joinGroupFlow = function (id) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'joinGroupFlow' + '&user_id=' + this.user_id,
            method: 'POST',
            data: {
                group_id: id
            }
        }).then(function (r) {
            return r.data;
        });
    };
    ApiFacade.prototype.joinGroupConfirm = function (id) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'joinGroupConfirm' + '&user_id=' + this.user_id,
            method: 'POST',
            data: {
                group_id: id
            }
        }).then(function (r) {
            return r.data;
        });
    };
    ApiFacade.prototype.getGroups = function () {
        return this.promisify(wx.request, {
            url: APP_BASE + 'getGroups' + '&user_id=' + this.user_id,
            method: 'GET',
        }).then(function (r) {
            return r.data;
        });
    };
    return ApiFacade;
}());
var ApiEnvironment;
(function (ApiEnvironment) {
    ApiEnvironment[ApiEnvironment["DEBUG"] = 0] = "DEBUG";
    ApiEnvironment[ApiEnvironment["PROD"] = 1] = "PROD";
})(ApiEnvironment = exports.ApiEnvironment || (exports.ApiEnvironment = {}));
function getApiFacade(env) {
    return env == ApiEnvironment.DEBUG ? new MockApiFacade() : new ApiFacade();
}
exports.getApiFacade = getApiFacade;
//# sourceMappingURL=data:application/json;base64,