"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var APP_BASE = "https://list2-wxapp.tcbx99.cn/";
var ApiFacade = (function () {
    function ApiFacade() {
        this.token = '';
        this.user_id = 0;
        this.dummy_group_id = 1;
    }
    ApiFacade.prototype.promisify = function (f, p) {
        return new Promise(function (r, e) {
            p.success = function (d) { r(d); };
            p.fail = function (d) { e(d); };
            f(p);
        });
    };
    ApiFacade.prototype.login = function (code, u) {
        var _this = this;
        console.log("What");
        return this.promisify(wx.request, {
            url: APP_BASE + 'login',
            method: 'POST',
            data: {
                auth_code: code,
                nickname: u.nickName,
                avatar_url: u.avatarUrl,
            }
        }).then(function (r) {
            _this.token = r.data.token;
            _this.user_id = +r.data.user_id;
            return {
                token: r.data.token,
                user_id: r.data.user_id
            };
        });
    };
    ApiFacade.prototype.createGroup = function (name, desc, gType) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'createGroup' + '?user_id=' + this.user_id,
            method: 'POST',
            data: {
                group_name: name,
                group_desc: desc,
                group_type: gType,
            }
        }).then(function (r) {
            return r.data;
        });
    };
    ApiFacade.prototype.updateGroup = function (list) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'updateGroup' + '?user_id=' + this.user_id,
            method: 'POST',
            data: {
                group_name: list.group_name,
                group_desc: list.group_desc,
                group_type: list.group_type,
            }
        }).then(function (r) {
            return r.data;
        });
    };
    ApiFacade.prototype.deleteGroup = function () { return new Promise(function (r) { r(); }); };
    ApiFacade.prototype.joinGroupFlow = function (id) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'joinGroupFlow' + '?user_id=' + this.user_id,
            method: 'POST',
            data: {
                group_id: id
            }
        }).then(function (r) {
            return r.data;
        });
    };
    ApiFacade.prototype.joinGroupConfirm = function (id) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'joinGroupConfirm' + '?user_id=' + this.user_id,
            method: 'POST',
            data: {
                group_id: id
            }
        }).then(function (r) {
            return r.data;
        });
    };
    ApiFacade.prototype.getGroups = function () {
        return this.promisify(wx.request, {
            url: APP_BASE + 'getGroups' + '?user_id=' + this.user_id,
            method: 'GET',
        }).then(function (r) {
            return r.data;
        });
    };
    ApiFacade.prototype.createMission = function (mission) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'createMission' + '?user_id=' + this.user_id,
            method: 'POST',
            data: mission
        }).then(function (r) {
            return r.data;
        });
    };
    ApiFacade.prototype.completeMission = function (mission) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'completeMission' + '?user_id=' + this.user_id,
            method: 'POST',
            data: mission.mission_id
        });
    };
    ApiFacade.prototype.rejectMission = function (mission) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'rejectMission' + '?user_id=' + this.user_id,
            method: 'POST',
            data: mission.mission_id
        });
    };
    ApiFacade.prototype.deleteAllDone = function (group) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'clearMissions' + '?user_id=' + this.user_id,
            method: 'POST',
            data: group.group_id
        });
    };
    ApiFacade.prototype.getMissions = function (group_id, is_admin) {
        if (is_admin) {
            return this.promisify(wx.request, {
                url: APP_BASE + 'getMissionsForGroup' + '?user_id=' + this.user_id,
                method: 'POST',
                data: group_id
            }).then(function (r) { return r.data; });
        }
        else {
            return this.promisify(wx.request, {
                url: APP_BASE + 'getMissionsForUser' + '?user_id=' + this.user_id,
                method: 'POST',
                data: group_id
            }).then(function (r) { return r.data; });
        }
    };
    ApiFacade.prototype.getMembersByGroup = function (id) {
        return this.promisify(wx.request, {
            url: APP_BASE + 'getMemberByGroup' + '?user_id=' + this.user_id,
            method: 'POST',
            data: id
        }).then(function (r) {
            return r.data;
        });
    };
    return ApiFacade;
}());
function getApiFacade() {
    return new ApiFacade();
}
exports.getApiFacade = getApiFacade;
//# sourceMappingURL=data:application/json;base64,